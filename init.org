* Table of contents                                                     :TOC:
- [[#setup-][Setup !]]
  - [[#basics-][Basics !]]
    - [[#preface-][Preface !]]
    - [[#package-manager-][Package Manager !]]
      - [[#elpaca-installation--][Elpaca Installation  !]]
      - [[#elpaca-use-package-integration-][Elpaca use-package Integration !]]
      - [[#melpulls-][Melpulls !]]
      - [[#elpaca-build-if-new-][Elpaca build if new !]]
      - [[#elpaca-customisation-][Elpaca Customisation !]]
        - [[#config][Config]]
    - [[#magit-][Magit !]]
      - [[#magit-commit-mark-][Magit commit mark !]]
      - [[#magit-others-][Magit others !]]
    - [[#eshell-][Eshell !]]
      - [[#general-][General !]]
          - [[#em-dirsel-][em-dirs.el !]]
          - [[#em-basicel-][em-basic.el !]]
      - [[#config-][Config !]]
      - [[#eloginel-][elogin.el !]]
      - [[#eprofileel-][eprofile.el !]]
    - [[#yasnippets-][Yasnippets !]]
    - [[#eldoc-][Eldoc !]]
    - [[#lsp-bridge-][LSP-bridge !]]
    - [[#yafolding-][yafolding !]]
    - [[#idk-][IDK !]]
    - [[#arxiv-][ARXIV !]]
    - [[#treesit-][treesit !]]
  - [[#visuals-][Visuals !]]
    - [[#page-break-lines][Page Break Lines]]
    - [[#dashboard-][Dashboard !]]
    - [[#window-scrolls-][Window Scrolls !]]
      - [[#poke-line-][Poke-line !]]
    - [[#colors-][Colors !]]
      - [[#colorful-mode-][Colorful-mode !]]
    - [[#ascii-table-][Ascii table !]]
    - [[#themes-][Themes !]]
    - [[#consult--vertico--embark][Consult + Vertico + embark]]
  - [[#programming-languages-][Programming Languages !]]
    - [[#c-][C !]]
      - [[#clangd-][Clangd !]]
      - [[#test-c][Test-c]]
        - [[#notes][Notes]]
        - [[#config-1][Config]]
      - [[#gobolt-][Gobolt !]]
      - [[#cc-mode-][CC-mode !]]
    - [[#latex-][LATEX !]]
      - [[#auctex-][Auctex !]]
      - [[#latexmk-][LatexMK !]]
      - [[#cdlatex-][CDlatex !]]
      - [[#xenops-][Xenops !]]
      - [[#laas][Laas]]
      - [[#amsreftex][amsreftex]]
      - [[#magic-latex-buffer-][Magic-latex-buffer !]]
      - [[#latex-preview-pane][Latex-preview-pane]]
      - [[#litex][Litex]]
      - [[#tex-item][tex-item]]
      - [[#tex-parens-][tex-parens !]]
      - [[#latex-table-wizard-][latex-table-wizard !]]
      - [[#preview-latex][preview-latex]]
      - [[#texlab-lsp-][Texlab (LSP) !]]
    - [[#ocaml-][OCAML !]]
      - [[#opam][Opam]]
      - [[#opam-switch][Opam-Switch]]
      - [[#caml-][Caml !]]
      - [[#tuareg-][Tuareg !]]
      - [[#merlin-][Merlin !]]
      - [[#merlin-eldoc-][Merlin-Eldoc !]]
      - [[#dune-][Dune !]]
      - [[#dune-format-][Dune-format !]]
      - [[#iedit-][Iedit !]]
      - [[#merlin-iedit-][Merlin-Iedit !]]
      - [[#ocamlformat-][Ocamlformat !]]
      - [[#utop-][Utop !]]
      - [[#learn-ocaml-][Learn-ocaml !]]
    - [[#coq-][Coq !]]
      - [[#proof-general-][Proof General !]]
    - [[#lolcode][Lolcode]]
    - [[#yaml-][Yaml !]]
      - [[#yaml-mode-][Yaml-mode !]]
      - [[#yaml-pro-][Yaml-pro !]]
    - [[#other-handlers-][other handlers !]]
    - [[#java-][Java !]]
      - [[#gradle-][Gradle !]]
      - [[#jdtls][JDTLS]]
    - [[#ebuilds-][Ebuilds !]]
  - [[#org-][Org !]]
    - [[#toc-org][toc-org]]
    - [[#org-modern-][org-modern !]]
    - [[#org-popup-posframe-][org-popup-posframe !]]

* Setup !
:PROPERTIES:
:COLUMNS: %ITEM %EMACS %REQ_EXT %REQ_INT %OPT_EXT $OPT_INT
:END:
** Basics !
*** Preface !
:PROPERTIES:
:EMACS: 24.1
:REQ_EXT: None
:REQ_INT: None
:OPT_EXT: None
:OPT_INT: None
:END:
We have to turn off `Package.el` because it'll autoload all packages, which goes against elpaca's methodology.
#+begin_src elisp :tangle "yes"
  ;; -*- lexical-binding: t; -*-
  (setq package-enable-at-startup nil)
#+end_src
*** Package Manager !
**** Elpaca Installation  !
:PROPERTIES:
:EMACS: 27.1
:REQ_EXT: None
:REQ_INT: None
:OPT_EXT: None
:OPT_INT: None
:END:
#+begin_src elisp :tangle "yes"
  (defvar elpaca-installer-version 0.11)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                :ref nil :depth 1 :inherit ignore
                                :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                                :build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
         (build (expand-file-name "elpaca/" elpaca-builds-directory))
         (order (cdr elpaca-order))
         (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (<= emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
          (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                    ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                    ,@(when-let* ((depth (plist-get order :depth)))
                                                        (list (format "--depth=%d" depth) "--no-single-branch"))
                                                    ,(plist-get order :repo) ,repo))))
                    ((zerop (call-process "git" nil buffer t "checkout"
                                          (or (plist-get order :ref) "--"))))
                    (emacs (concat invocation-directory invocation-name))
                    ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                          "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                    ((require 'elpaca))
                    ((elpaca-generate-autoloads "elpaca" repo)))
              (progn (message "%s" (buffer-string)) (kill-buffer buffer))
            (error "%s" (with-current-buffer buffer (buffer-string))))
        ((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (let ((load-source-file-function nil)) (load "./elpaca-autoloads"))))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))
#+end_src
**** Elpaca use-package Integration !
#+begin_src elisp :tangle "yes"
  (elpaca elpaca-use-package
    ;; Enable Elpaca support for use-package's :ensure keyword.
    (elpaca-use-package-mode))
#+end_src
**** Melpulls !
#+begin_src elisp :tangle "yes"
  (elpaca-queue (elpaca '(melpulls :host github :repo "progfolio/melpulls")
                  (add-to-list 'elpaca-menu-functions #'melpulls)))
#+end_src
**** Elpaca build if new !
#+begin_src elisp :tangle "yes"
  (defun +elpaca/build-if-new (e)
    (setf (elpaca<-build-steps e)
          (if-let* ((default-directory (elpaca<-build-dir e))
                   (main (ignore-errors (elpaca--main-file e)))
                   (compiled (expand-file-name (concat (file-name-base main) ".elc")))
                   ((file-newer-than-file-p main compiled)))
              (progn (elpaca--signal e "Rebuilding due to source changes")
                     (cl-set-difference elpaca-build-steps
                                        '(elpaca--clone elpaca--configure-remotes elpaca--checkout-ref)))
            (elpaca--build-steps nil (file-exists-p (elpaca<-build-dir e))
                                 (file-exists-p (elpaca<-repo-dir e)))))
    (elpaca--continue-build e))
#+end_src
**** Elpaca Customisation !
***** Config
None, elpaca has very sane defaults.
*** Magit !
#+begin_src elisp :tangle "yes"
  (use-package transient
  	:ensure (transient :host github :repo "magit/transient"))

  (use-package magit
    :ensure (magit :host github :repo "magit/magit"))
#+end_src
#+begin_src elisp :tangle "yes"
  (use-package sqlite3
  	:ensure (sqlite3 :host github :repo "pekingduck/emacs-sqlite3-api"))

  (use-package yaml
  	:ensure (yaml :host github :repo "zkry/yaml.el" ))
  
  (use-package forge
    	;;:ensure nil
    	:ensure (forge :host github :repo "magit/forge")
    	)
#+end_src

**** Magit commit mark !
A CONFIG
#+begin_src elisp :tangle "yes"
  (use-package magit-commit-mark
  	:ensure (magit-commit-mark :host codeberg :repo "ideasman42/emacs-magit-commit-mark"))
#+end_src
**** Magit others !
TODO :
#+begin_src elisp :tangle "no"
  https://github.com/magit/git-modes/tree/main
  https://github.com/alphapapa/magit-todos/tree/master
  https://github.com/magit/orgit-forge/tree/main
  https://github.com/bradwright/magit-find-file.el/tree/master
  https://github.com/magit/magit-annex/tree/master
  https://github.com/magit/magit-popup/tree/master
  https://github.com/magit/orgit/tree/main
  https://github.com/sigma/magit-gh-pulls/tree/master
#+end_src
*** Eshell !
TODO : CUSTOMIZE FACES.
**** General !
When Eshell first starts, it reads and excute the files `eshell-login-script` and `eshell-rc-script`.
To call an external process that has a lisp counterpart, prepend `eshell-explicit-command-char` to the command.

An Eshell module is defined the same as any other library but with two additional requirements:
- first, the moduleâ€™s source file should be named em-name.el;
-  econd, the module must define an autoloaded Customize group with eshell-module as the parent group.
****** em-dirs.el !
- eshell-directory-change-hook : Idea, there exist `eshell-list-files-after-cd`, but it's annoying with ~/, as such, maybe create an util to ls -a when it's not in ~/?
****** em-basic.el !
- eshell-plain-echo-behavior nil [hot]
  
**** Config ! 
#+begin_src elisp :tangle "yes"
  (use-package eshell
    :ensure nil
    :demand t
    :custom
    ;; em-cmpl.el
    (eshell-show-lisp-completions nil) ; t would be too laggy and verbose
    ;; em-dirs.el
    (eshell-pushd-tohome t)
    (eshell-pushd-dextract t)
    (eshell-pushd-dunique t)
    ;; em-glob.el
    (eshell-glob-include-dot-files t)
    (eshell-glob-include-dot-dot t) ; idk
    ;; em-ls.el
    (eshell-ls-exclude-hidden nil) ; We already are using -A and -a, but we keep that in case, note that -A overrides this, so it won't show .. and .
    (eshell-ls-initial-args "-Ah")
    (eshell-ls-dired-initial-args "-ah")
    (eshell-ls-use-in-dired t)
    ;; em-script.el
    (eshell-login-script "~/.emacs.d/eshell/elogin.el")
    (eshell-login-script "~/.emacs.d/eshell/eprofile.el")
    ;; em-term.el
    (eshell-visual-subcommands (("git" "log" "diff" "show")))
    (eshell-visual-options (("git" "--help" "-h" "--paginate" "-p" )))
  	;; em-unix.el
  	(eshell-rm-removes-directories t)
  	;; esh-cmd.el
    (eshell-prefer-lisp-functions t)
  	;; esh-mode.el
  	(eshell-directory-name "~/.emacs.d/eshell/")
    ;; esh-module.el
    (eshell-modules-list '(eshell-alias
  												 ;; eshell-banner ; done in elogin.el
  												 eshell-basic
  												 eshell-cmpl
  												 eshell-dirs
  												 ;; eshell-elecslash ; unpractical.
  												 eshell-extpipe
  												 eshell-glob
  												 eshell-hist
  												 eshell-ls
  												 eshell-pred
  												 eshell-prompt
  												 ;; eshell-rebind ;; bad rebinds.
  												 eshell-script
  												 ;; eshell-smart ;; quirky and buggy.
  												 eshell-term
  												 ;; eshell-tramp ;; I don't use tramp.
  												 ;; eshell-xtra ;; I don't use these aliases.
  												 eshell-unix)))
#+end_src
**** elogin.el !
#+begin_src elisp :tangle eshell/elogin.el
  echo "Welcome, My Queen, to your, oh so marvelous, Emacs Shell instance.\nWhat are *Her Highness* directives on this fine day ?\n"
#+end_src
**** eprofile.el !
#+begin_src elisp :tangle eshell/eprofile.el
#+end_src
*** Yasnippets !
#+begin_src elisp :tangle "yes"
  (use-package yasnippet
    :ensure t
    :hook (c-mode . yas-minor-mode)
    :config
    (define-key yas-minor-mode-map [(tab)]        nil)
    (define-key yas-minor-mode-map (kbd "TAB")    nil)
    (define-key yas-minor-mode-map (kbd "<tab>")  nil)
    (yas-global-mode t))
#+end_src
*** Eldoc !
For older versions of emacs, if not running latest.
#+begin_src elisp :tangle "no"
  (use-package eldoc
  	:ensure t
    :demand t
    :preface
    ;; avoid loading of built-in eldoc, see https://github.com/progfolio/elpaca/issues/236#issuecomment-1879838229
    (unload-feature 'eldoc t)
    (setq custom-delayed-init-variables '())
    (defvar global-eldoc-mode nil)
    :config
    (global-eldoc-mode))
#+end_src
When running latest (no need to upgrade eldoc)
#+begin_src elisp :tangle "yes"
  (use-package eldoc
  	:ensure nil
  	:demand t
  	:config
  	(global-eldoc-mode))
#+end_src
*** LSP-bridge !
Install Python dependencies: pip3 install epc orjson sexpdata six setuptools paramiko rapidfuzz watchdog packaging
for cargo : curl https://sh.rustup.rs -sSf | sh
yaml : npm install -g yaml-language-server
#+begin_src elisp :tangle "yes"
  (use-package lsp-bridge
    :ensure '(lsp-bridge
              :type git :host github :repo "manateelazycat/lsp-bridge"
              :files (:defaults "*.el" "*.py" "acm" "core" "langserver" "multiserver" "resources")
              :build (:not elpaca--byte-compile))
    :custom
    (lsp-bridge-c-lsp-server "clangd")
    (lsp-bridge-python-multi-lsp-server "pylsp_ruff")
    (lsp-bridge-python-lsp-server "pylsp")
  	(lsp-bridge-tex-lsp-server "texlab")
    ;;(lsp-bridge-markdown-lsp-server )
    (lsp-bridge-cmake-lsp-server "cmake-language-server")
  	;;; Variables.
  	(lsp-bridge-enable-inlay-hint t) ;; to test
  	(lsp-bridge-enable-hover-diagnostic t) ;; to test
  	(lsp-bridge-enable-debug nil) ;; to test
  	(acm-backend-lsp-candidate-max-length 200) ;; fuck java, to test
  	(lsp-bridge-signature-show-with-frame-position "point") ;; testing to see if pop up works
    :config
    (global-lsp-bridge-mode))
#+end_src
*** yafolding !
- requirements : None !
  face : yafolding-ellipsis-face
#+begin_src elisp :tangle "yes"
  (use-package yafolding
  	:ensure (yafolding :host github :repo "emacsorphanage/yafolding")
  	:hook (prog-mode . yafolding-mode)
  	:custom
  	(yafolding-ellipsis-content "(...)")
  	(yafolding-show-fringe-marks t))
#+end_src
*** IDK !
#+begin_src elisp :tangle "yes"
  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(abbrev-suggest t)
   '(align-indent-before-aligning t)
   '(auto-image-file-mode t)
   '(case-fold-search t)
   '(column-number-mode t)
   '(compilation-ask-about-save t)
   '(context-menu-mode t)
   '(ctl-arrow nil)
   '(diff-default-read-only nil)
   '(diff-mode-hook '(diff-delete-empty-files diff-make-unified))
   '(dired-kept-versions 5)
   '(display-raw-bytes-as-hex t)
   '(electric-pair-skip-whitespace-chars '(32 9 10))
   '(fancy-splash-image nil)
   '(find-file-hook
     '(mode-local-post-major-mode-change url-handlers-set-buffer-mode
                                         epa-file-find-file-hook
                                         vc-refresh-state
                                         ede-turn-on-hook))
   '(fringe-mode 6 nil (fringe))
   '(gdb-debug-log-max nil)
   '(gdb-debuginfod-enable-setting t)
   '(gdb-enable-debug t)
   '(gdb-many-windows t)
   '(ggtags-global-output-format 'ctags)
   '(ggtags-mode-prefix-key [3])
   '(global-ede-mode t)
   '(global-semantic-decoration-mode nil)
   '(global-semantic-highlight-edits-mode t)
   '(global-semantic-highlight-func-mode t)
   '(global-semantic-idle-breadcrumbs-mode t nil (semantic/idle))
   '(global-semantic-idle-completions-mode t nil (semantic/idle))
   '(global-semantic-idle-local-symbol-highlight-mode t nil (semantic/idle))
   '(global-semantic-idle-summary-mode t)
   '(global-semantic-mru-bookmark-mode t)
   '(global-semantic-show-parser-state-mode t)
   '(global-semantic-show-unmatched-syntax-mode t)
   '(global-semantic-stickyfunc-mode t)
   '(global-tab-line-mode t)
   '(grep-highlight-matches 'always)
   '(gud-key-prefix [24 1])
   '(gud-tooltip-mode t)
   '(image-load-path
     '(data-directory load-path
       " ~/Pictures/" " ~/emacs/"))
   '(imenu-auto-rescan t)
   ;;'(indent-tabs-mode nil)
   '(initial-scratch-message nil)
   '(ispell-check-comments nil)
   '(ispell-dictionary nil)
   '(ispell-following-word t)
   '(ispell-silently-savep t)
   '(kept-new-versions 5)
   '(kept-old-versions 5)
   '(linum-format 'dynamic)
   '(package-selected-packages
     '( auto-header
        auto-virtualenv c-eldoc demangle-mode disaster
        context-coloring utop ejc-sql emacsql sql-indent
        flycheck-clang-analyzer flycheck-clangcheck
        flycheck-cython flycheck-ocaml
        flycheck-pycheckers ggtags git
        git-auto-commit-mode git-backup git-blamed
        magit-annex magit-commit-mark magit-delta
        magit-file-icons magit-find-file magit-gh-pulls
        magit-gitlab magit-org-todos magit-todos
        highlight idlwave indent-guide gh-md vmd-mode
        flymd org-sql pdf-tools prism
        pydoc python python-mode elpy anaconda-mode
        treemacs-magit undo-tree yasnippet-snippets))
   '(prog-mode-hook '( abbrev-mode))
   '(py-auto-complete-p t)
   '(py-auto-fill-mode nil)
   '(py-beep-if-tab-change nil)
   '(py-docstring-style 'django)
   '(py-indent-tabs-mode nil)
   '(python-indent-offset 4)
   '(python-shell-completion-native-disabled-interpreters nil)
   '(scalable-fonts-allowed t)
   '(semantic-complete-inline-analyzer-displayer-class 'semantic-displayer-tooltip)
   '(semantic-default-submodes
     '(global-semantic-highlight-func-mode global-semantic-stickyfunc-mode
                                           global-semantic-idle-completions-mode
                                           global-semantic-idle-scheduler-mode
                                           global-semanticdb-minor-mode
                                           global-semantic-idle-summary-mode
                                           global-semantic-mru-bookmark-mode
                                           global-semantic-idle-local-symbol-highlight-mode
                                           global-semantic-highlight-edits-mode
                                           global-semantic-show-unmatched-syntax-mode
                                           global-semantic-show-parser-state-mode))
   '(semantic-mode t)
   '(show-paren-context-when-offscreen 'overlay)
   '(show-paren-delay 0)
   '(show-paren-style 'mixed)
   '(standard-indent 2)
   '(tab-width 2)
   '(text-mode-hook '(text-mode-hook-identify))
   '(treesit-fold-line-count-format " %d lines ")
   '(treesit-fold-line-count-show t)
   '(treesit-fold-on-next-line t)
   '(treesit-fold-summary-show nil)
   '(treesit-font-lock-level 4)
   '(use-package-check-before-init t)
   '(utop-load-packages-without-asking t)
   '(vc-make-backup-files t)
   '(warning-suppress-types '((treesit) (treesit)))
   '(which-function-mode t))

  (setq require-final-newline t)

  ;;(require 'python-mode)
  (require 'url-handlers)
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(treesit-fold-replacement-face ((t (:foreground "#808080" :box (:line-width (1 . -1) :style pressed-button))))))

  (setq gud-gdb-command-name "gdb -i=mi")
#+end_src

*** ARXIV !
#+begin_src elisp :tangle "yes"
  (use-package arxiv-mode
    :ensure (arxiv-mode :host github :repo "fizban007/arxiv-mode")
    :init
    (mkdir "~/Documents/arxiv" t)
    :custom
    (arxiv-author-list-maximum 0)
    (arxiv-default-download-folder "~/Documents/arxiv")
    (arxiv-default-bibliography "~/Documents/arxiv/bibliography")
    (arxiv-startup-with-abstract-window t))
#+end_src
*** treesit !
#+begin_src elisp :tangle "yes"
  (use-package treesit
  	:ensure nil
  	:custom (treesit-language-source-alist '((asm  "https://github.com/RubixDev/tree-sitter-asm")
  																					 (bash  "https://github.com/tree-sitter/tree-sitter-bash")
  																					 (bibtex  "https://github.com/latex-lsp/tree-sitter-bibtex")
  																					 (c  "https://github.com/tree-sitter/tree-sitter-c")
  																					 (cmake  "https://github.com/uyha/tree-sitter-cmake")
  																					 (cpp "https://github.com/tree-sitter/tree-sitter-cpp/" "master" "src")
  																					 (elisp  "https://github.com/Wilfred/tree-sitter-elisp")
  																					 (haskell "https://github.com/tree-sitter/tree-sitter-haskell" "master" "src")
  																					 (html  "https://github.com/tree-sitter/tree-sitter-html")
  																					 (json "https://github.com/tree-sitter/tree-sitter-json")
  																					 (lua  "https://github.com/MunifTanjim/tree-sitter-lua" "main" "src")
  																					 (markdown  "https://github.com/tree-sitter-grammars/tree-sitter-markdown")
  																					 (markdown-inline  "https://github.com/tree-sitter-grammars/tree-sitter-markdown")
  																					 (ocaml  "https://github.com/tree-sitter/tree-sitter-ocaml")
  																					 (ocaml-interface  "https://github.com/tree-sitter/tree-sitter-ocaml")
  																					 (org  "https://github.com/emiasims/tree-sitter-org")
  																					 (python  "https://github.com/tree-sitter/tree-sitter-python")
  																					 (rust "https://github.com/tree-sitter/tree-sitter-rust" "master" "src")
  																					 (sql  "https://github.com/DerekStride/tree-sitter-sql")
  																					 (yaml "https://github.com/tree-sitter-grammars/tree-sitter-yaml"))))
  																				 
  																				 
  	(use-package treesit-fold
  		:ensure (treesit-fold :host github :repo "emacs-tree-sitter/treesit-fold"))
#+end_src
** Visuals !
*** Page Break Lines
:PROPERTIES:
:EMACS: 25.1
:REQ_EXT: None
:REQ_INT: None
:OPT_EXT: None
:OPT_INT: None
:END:
We mainly use it with dashboard, but it can look good in other buffers.
#+begin_src elisp :tangle "yes"
  (use-package page-break-lines
  	:ensure (page-break-lines :host github :repo "purcell/page-break-lines")
  	:custom
  	(page-break-lines-char ?â”€)
  	(page-break-lines-lighter "^L")
  	(page-break-lines-modes '(prog-mode text-mode special-mode)))
#+end_src
*** Dashboard !
TODO : Finish navigator and face customization.
#+begin_src elisp :tangle "yes"
  (use-package dashboard
    :ensure (dashboard :host github :repo "emacs-dashboard/emacs-dashboard")
    :config
    (add-hook 'elpaca-after-init-hook #'dashboard-insert-startupify-lists)
    (add-hook 'elpaca-after-init-hook #'dashboard-initialize)
    (dashboard-setup-startup-hook)
    :custom
    (dashboard-buffer-name "Welcome !")
    (dashboard-banner-ascii "KIGOTH")
    (dashboard-startup-banner "~/.emacs.d/council.jpeg" 'ascii 0)
    (dashboard-banner-logo-title "Hello Dearest Ana, may you have a good time !")
    (dashboard-items '((recents   . 10)
  										 (bookmarks . 5)
                       (projects  . 5)))
    (dashboard-footer-messages '("UwU"
  															 "OwO"
  															 "UmU"
  															 "^O^"
  															 "u,u"))
    (dashboard-icon-file-height 1.0)
    (dashboard-image-banner-max-height 0)
    (dashboard-image-banner-max-width 966) ;; why 966 ? is it the width of my screen?
    (dashboard-remove-missing-entry t)
  	(dashboard-show-shortcuts t)
  	(dashboard-startupify-list '(dashboard-insert-banner
  															 dashboard-insert-newline
  															 dashboard-insert-banner-title
  															 dashboard-insert-newline
  															 dashboard-insert-navigator
  															 dashboard-insert-newline
  															 dashboard-insert-init-info
  															 dashboard-insert-page-break
  															 (lambda (&rest _) (insert "\n\f\n"))
  															 dashboard-insert-items
  															 dashboard-insert-newline
  															 dashboard-insert-footer))
  	(dashboard-page-separator "\n")
  	;; Format: "(icon title help action face prefix suffix)"
  	(dashboard-navigator-buttons
  	 `(;; line1
  	   (("â˜…"
  			 "Repos"
  			 "Browse github repositories."
  			 (lambda (&rest _) (browse-url "https://github.com/ananashawaw?tab=repositories"))
  			 warning)
  	    ("?" "" "?/h" #'show-help nil "<" ">")))))
#+end_src
*** Window Scrolls !
**** Poke-line !
#+begin_src elisp :tangle "yes"
    ;; to contribute
  (use-package poke-line
  	:disabled
    :ensure (poke-line :host github :repo "RyanMillerC/poke-line")
  	:config
  	(poke-line-global-mode 1)
  	(poke-line-set-pokemon "pachirisu"))
#+end_src
*** Colors !
**** Colorful-mode !
#+begin_src elisp :tangle "yes"
(use-package colorful-mode
    :ensure t
    :config
    (global-colorful-mode t)
    (global-unset-key (kbd "C-x c x"))
    (global-unset-key (kbd "C-x c c"))
    (global-unset-key (kbd "C-x c r")))
#+end_src
*** Ascii table !
#+begin_src elisp :tangle "yes"
  (use-package ascii-table
  	:ensure (ascii-table :host github :repo "ananashawaw/emacs-ascii-table")
  	:custom
  	(ascii-table-initial-base 10)
  	(ascii-table-initial-control nil)
  	(ascii-table-initial-escape t))
#+end_src
*** Themes !
#+begin_src elisp :tangle "yes"
  (use-package shades-of-purple-theme
    :ensure t
    :config
    ;;(load-theme 'shades-of-purple t)
  	)

  (use-package pink-bliss-uwu-theme
    :ensure (pink-bliss-uwu-theme
             :host github :repo "themkat/pink-bliss-uwu"
  					 :build (:not elpaca--byte-compile))
    :config
  	(load-theme 'pink-bliss-uwu t)
  	:custom
  	(pink-bliss-uwu-use-custom-font t)
  	)

  (use-package girly-notebook-theme
    :ensure t)
#+end_src

*** Consult + Vertico + embark
https://gitlab.com/titus.pinta/consult-tex/-/blob/546e4b16a3f98fa1d4d440acb158b8fa5147a14c/consult-tex.el
#+begin_src elisp :tangle "no"
  ;; todo
  (use-package consult
    :disabled
    :ensure t)

  ;; todo
  (use-package vertico
    :disabled
    :ensure t)

  ;; todo
  (use-package embark
    :disabled
    :ensure t)
#+end_src
** Programming Languages !
*** C !
**** Clangd !
(need to check for all build options.
#+begin_src shell :tangle "no"
  git clone --depth 1 https://github.com/llvm/llvm-project.git
  mkdir ~/.cache/llvm # just any dest basically
  cd ~/.cache/llvm
  cmake ~/llvm-project/llvm/ -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra;lld" -DCMAKE_BUILD_TYPE=Release
  # if lld is already installed, add -DLLVM_USE_LINKER=lld
  cd
  cmake --build ~/.cache/llvm #SLOW
#+end_src
**** Test-c
:PROPERTIES:
:EMACS: 23.3
:REQ_EXT: None
:REQ_INT: None
:OPT_EXT: None
:OPT_INT: None
:END:
***** Notes
From the README :
#+begin_src markdown :tangle "no"
  Call M-x `test-c` to open a temporary `*test-c*` buffer. It is
  prefilled with a skeleton C program (customized through
  `test-c-default-code`) which is then compiled and run.

  Every following call to `test-c` will compile and run the program
  and show its ouput in the minibar.

  You can customize the compilation and run commands from the source
  itself using special definitions lines (very similar to Emacs file
  local variables in concept). Those lines must be of the form:

      /*= var: value =*/

  The `compile` and `run` variable are the one used respectively for
  compiling and running the file. You can refer to other variable from
  these variables using the `$var` syntax, similar to the shell. If you
  refer to a variable which has not been defined it will be passed as is
  to the shell, who might expand them (i.e. you can use shell/env
  variables too).

  The default value of `compile` and `run` inserted with the initial
  skeleton can be customized via the `test-c-default-compile-command`
  and `test-c-default-run-command` variables.

  `$exe` and `$src` are special variabled defined by test-c that expands
  to respectively the temporary executable filename and the temporary
  source file name.

  You can save the file and keep using Test-C afterwards.
#+end_src
***** Config
#+begin_src elisp :tangle "yes"
    (use-package test-c
      :ensure (test-c :host github :repo "aaptel/test-c")
      :custom
      (test-c-default-compile-command "gcc -O3 $src -o $exe")
      (test-c-default-run-command "$exe ; echo $?")
      (test-c-default-code "
  #include <stdio.h>
  #include <stdint.h<
  #include <stddef.h>

  int main()
    {int uwu = 17;
     printf(\"%d\\n\", uwu);};"))
#+end_src

**** Gobolt !
#+begin_src elisp :tangle "yes"
  (use-package compiler-explorer
    :ensure (compiler-explorer :host github :repo "mkcms/compiler-explorer.el")
    :bind (("M-g " . compiler-explorer)
           :map compiler-explorer-mode-map
           ("M-g c" . compiler-explorer-set-compiler)
           ("M-g f" . compiler-explorer-set-compiler-args)
           ("M-g M-f" . compiler-explorer-set-execution-args)
           ("M-g i" . compiler-explorer-set-input)
           ("M-g j" . compiler-explorer-jump)
           ("M-g y" . compiler-explorer-layout)
           ("M-g M-l a" . compiler-explorer-add-library)
           ("M-g M-l r" . compiler-explorer-remove-library)
           ("M-g r" . compiler-explorer-new-session)
           ("M-g p" . compiler-explorer-previous-session)
           ("M-g s" . compiler-explorer-make-link)
           ("M-g M-s" . compiler-explorer-restore-from-link)
           ("M-g <del>" . compiler-explorer-exit)
           ("M-g M-d" . compiler-explorer-discard-session))
    :custom
    (compiler-explorer-sessions 10)
    (compiler-explorer-default-layout [(source . asm) output]))
#+end_src

**** CC-mode !
TODO :
- customize C ts Mode.
- customize C face.
#+begin_src elisp :tangle "yes"
  (use-package cc-mode
    :ensure nil
    :hook ((c-initialization . (lambda () (c-set-style "ana")))
  				 (java-mode . (lambda () (c-set-style "ana"))))
  	
   :init
    (c-add-style "ana" '(;; Comments
                         (c-comment-only-line-offset 0)
                         (c-block-comment-prefix "*")
                         (c-doc-comment-style . ((c-mode . gtkdoc)
                                                 (c++-mode . gtkdoc)
                                                 (java-mode . javadoc)
                                                 (pike-mode . autodoc)))
                         
                         ;; Hanging braces, colons, commas and semicolons
                         (c-hanging-braces-alist . ((arglist-close nil) ; nil because we put a semicolon after it
                                                    (brace-list-intro after) ; RET after first content of a {} list
                                                    (defun-open before) ; RET after closing ) of function def
                                                    (defun-close nil) ; nil because we put semicolon after it
                                                    (class-open before) ; this is C++ but same result as defun-open
                                                    (class-close nil) ; C++ but defun-close logic
                                                    (block-open before) ; defun-open logic
                                                    (block-close nil) ; defun-close logic
                                                    (statement-cont before) ; idk this is for statement continuation like uwu = \n a + b + c ...
                                                    (substatement-open before) ; defun-open logic
                                                    (statement-case-open before) ; defun-open logic
                                                    (brace-list-open nil) ; keep {} list connected to the =
                                                    (brace-list-close nil) ; nil because we put comma after it 
                                                    (brace-entry-open before) ; defun-open logic
                                                    (extern-lang-open before) ; defun-open logic
                                                    (extern-lang-close nil) ; defun-close logic
                                                    (namespace-open before) ; C++ but extern logic
                                                    (namespace-close after) ; C++ but extern logic
                                                    (module-open before) ; CORBA IDL, extern logic 
                                                    (module-close after) ; CORBA IDL, extern logic
                                                    (composition-open before) ; CORBA IDL, extern logic 
                                                    (composition-close after) ; CORBA IDL, extern logic
                                                    (inexpr-class-open before) ; Java, but C++ class logic
                                                    (inexpr-class-close nil) ; Java, but C++ class logic
                                                    (inline-open before) ; C++ but defun-open logic
                                                    (inline-close nil) ; C++ but defun-close logic
                                                    (arglist-cont-nonempty before))) ; lines up arguments vertically
                         
                         (c-hanging-colons-alist . ((case-label after) ; RET after : of a case label
                                                    (label after) ; RET after : of a goto label
                                                    (access-label after) ; C++ RET after visibility keyword ( public, private, etc.)
                                                    (member-init-intro after) ; C++ no idea but looks like a label
                                                    (inher-intro after))) ; C++ no idea but looks like a label
                         
                         (c-hanging-semi&comma-criteria . (c-semi&comma-inside-parenlist
                                                           c-semi&comma-no-newlines-for-oneline-inliners
                                                           c-semi&comma-no-newlines-before-nonblanks))
                         
                         ;; Cleanup
                         (c-max-one-liner-length 100)
                         
                         (c-cleanup-list . (defun-close-semi
                                            list-close-comma
                                            scope-operator
                                            one-liner-defun
                                            compact-empty-funcall
                                            comment-close-slash))
                         
                         ;; Indenting
                         (c-label-minimum-indentation 0)
                         (c-basic-offset 1)
                         
                         (c-offsets-alist . ((string . -1000)
                                             (c . (first
                                                   c-lineup-C-comments))
                                             (defun-open . 2)
                                             (defun-close . (first
                                                             c-lineup-close-paren
                                                             0))
                                             (defun-block-intro . (first
                                                                   c-lineup-arglist-intro-after-paren
                                                                   0))
                                             (class-open . 2)
                                             (class-close . (first
                                                             c-lineup-close-paren
                                                             0))
                                             (inline-open . 2)
                                             (inline-close . (first
                                                              c-lineup-close-paren
                                                              0))
                                             (func-decl-cont . (first
                                                                c-lineup-java-throws
                                                                1))
                                             (knr-argdecl-intro . 1)
                                             (knr-argdecl . 0)
                                             (topmost-intro . 0)
                                             (topmost-intro-cont . (first
                                                                    c-lineup-string-cont
                                                                    c-lineup-assignments
                                                                    c-lineup-cascaded-calls
                                                                    c-lineup-topmost-intro-cont))
                                             (annotation-top-cont . 0)
                                             (annotation-var-cont . 0)
                                             (member-init-intro . 1)
                                             (member-init-cont . (first
                                                                  c-lineup-multi-inher))
                                             (inher-intro . 1)
                                             (inher-cont . (first
                                                            c-lineup-multi-inher
                                                            c-lineup-java-inher))
                                             (block-open . 0)
                                             (block-close . (first
                                                             c-lineup-close-paren
                                                             0))
                                             (brace-list-open . 2)
                                             (brace-list-close . (first
                                                                  c-lineup-arglist-close-under-paren
                                                                  c-lineup-close-paren
                                                                  0))
                                             (brace-list-intro . (first
                                                                  c-lineup-2nd-brace-entry-in-arglist
                                                                  c-lineup-arglist-intro-after-paren
                                                                  c-lineup-class-decl-init-after-brace
                                                                  0))
                                             (brace-list-entry . (first
                                                                  c-lineup-arglist-close-under-paren
                                                                  c-lineup-under-anchor))
                                             (brace-entry-open . 0)
                                             (statement . (first
                                                           c-lineup-runin-statements))
                                             (statement-cont . (first
                                                                c-lineup-string-cont
                                                                c-lineup-ternary-bodies
                                                                c-lineup-cascaded-calls
                                                                c-lineup-assignments
                                                                1))
                                             (statement-block-intro . (first
                                                                       c-lineup-arglist-intro-after-paren
                                                                       1))
                                             (statement-case-intro . (first
                                                                      c-lineup-arglist-intro-after-paren
                                                                      2))
                                             (statement-case-open . 0)
                                             (substatement . 1)
                                             (substatement-open . 2)
                                             (substatement-label . 2)
                                             (case-label . (first
                                                            c-lineup-runin-statements))
                                             (access-label . -1)
                                             (label . 2)
                                             (do-while-closure . 0)
                                             (else-clause . 0)
                                             (catch-clause . 0)
                                             (comment-intro . (first
                                                               c-lineup-knr-region-comment
                                                               c-lineup-comment))
                                             (arglist-intro . (first
                                                               c-lineup-arglist-intro-after-paren
                                                               1))
                                             (arglist-cont . (first
                                                              c-lineup-gcc-asm-reg
                                                              c-lineup-string-cont
                                                              c-lineup-cascaded-calls
                                                              c-lineup-ternary-bodies
                                                              c-lineup-arglist-operators
                                                              c-lineup-assignments
                                                              (add c-lineup-argcont -2)
                                                              c-lineup-arglist
                                                              c-lineup-arglist-close-under-paren
                                                              c-lineup-gcc-asm-reg
                                                              0))
                                             (arglist-cont-nonempty . (first
                                                                       c-lineup-gcc-asm-reg
                                                                       c-lineup-string-cont
                                                                       c-lineup-cascaded-calls
                                                                       c-lineup-ternary-bodies
                                                                       c-lineup-arglist-operators
                                                                       c-lineup-assignments
                                                                       (add c-lineup-argcont -2)
                                                                       c-lineup-arglist
                                                                       c-lineup-arglist-close-under-paren
                                                                       c-lineup-arglist))
                                             (arglist-close . (first
                                                               c-lineup-arglist
                                                               c-lineup-arglist-close-under-paren
                                                               c-lineup-close-paren))
                                             (stream-op . (first
                                                           c-lineup-streamop))
                                             (inclass . 1)
                                             (cpp-macro . -1000)
                                             (cpp-define-intro . 2)
                                             (cpp-macro-cont . 1)
                                             (friend . 0)
                                             (objc-method-intro .
                                                                [0])
                                             (objc-method-args-cont . (first
                                                                       c-lineup-ObjC-method-args-2))
                                             (objc-method-call-cont . (c-lineup-ObjC-method-call-colons
  						                                                         c-lineup-ObjC-method-call
  						                                                         1))
                                             (extern-lang-open . 0)
                                             (extern-lang-close . (first
                                                                   c-lineup-close-paren
                                                                   0))
                                             (inextern-lang . 1)
                                             (namespace-open . 0)
                                             (namespace-close . (first
                                                                 c-lineup-close-paren
                                                                 0))
                                             (innamespace . 1)
                                             (module-open . 0)
                                             (module-close . (first
                                                              c-lineup-close-paren
                                                              0))
                                             (inmodule . 1)
                                             (composition-open . 0)
                                             (composition-close . (first
                                                                   c-lineup-close-paren
                                                                   0))
                                             (incomposition . 1)
                                             (template-args-cont . (first
                                                                    c-lineup-template-args
                                                                    1))
                                             (inlambda . (first
                                                          c-lineup-inexpr-block))
                                             (lambda-intro-cont . 1)
                                             (inexpr-statement . (first
                                                                  c-lineup-inexpr-block
                                                                  2))
                                             (inexpr-class . (first
                                                              c-lineup-inexpr-block
                                                              2))))
                         
                         ;; Preprocessor
                         (c-syntactic-indentation-in-macros t)
                         (c-backslash-column 30)
                         (c-backslash-max-column 200)
                         (c-auto-align-backslashes t)
                         (c-cpp-indent-to-body-directives . ("pragma"
                                                             "ifdef"
                                                             "endif"
                                                             "if"
                                                             "ifndef"
                                                             "else"
                                                             "elif"
                                                             "define"
                                                             "undef"))))
    :custom
    ;; (c-ts-mode-indent-style 'gnu)
    ;; (c-ts-mode-indent-offset 1)
    ;; (c-ts-mode-emacs-sources-support t)
    (c-tab-always-indent t)
    (c-progress-interval 10)
    (c-asymmetry-fontification-flag t)
    (c-guess-region-max nil) ; entire buffer
    (c-guess-offset-threshold 5)
    (c-defun-tactic 'go-outward)
    (c-electric-pound-behavior '(alignleft))
    (c-ignore-auto-fill '(string cpp code))
    (c-require-final-newline   '((c-mode . t)
                                 (c++-mode . t)
                                 (objc-mode . t)
                                 (java-mode . t)
                                 (idl-mode . t)
                                 (pike-mode . t)
                                 (awk-mode . t))))
#+end_src
*** LATEX !
https://michaelneuper.com/posts/efficient-latex-editing-with-emacs/, it also talks of "calc", seems interesting.
www.emacswiki.org/emacs/WhizzyTeX
**** Auctex !
#+begin_src elisp :tangle "yes"
        ;; gotta custom it
        (use-package auctex
          :ensure (auctex :repo "https://git.savannah.gnu.org/git/auctex.git" :branch "main"
                          :pre-build (("make" "elpa"))
                          :build (:not elpaca--compile-info) ;; Make will take care of this step
                          :files ("*.el" "doc/*.info*" "etc" "images" "latex" "style")
                          :version (lambda (_) (require 'auctex) AUCTeX-version))

    			:hook (LaTeX-mode-hook . LaTeX-math-mode)
  )
#+end_src
**** LatexMK !
#+begin_src elisp :tangle "yes"
  ; we also need to install normal latexmk I think.
  (use-package auctex-latexmk
      :ensure t
      :custom
      (auctex-latexmk-inherit-TeX-PDF-mode t))
#+end_src
**** CDlatex !
#+begin_src elisp :tangle "yes"
  (use-package cdlatex
  	:ensure (cdlatex :host github :repo "cdominik/cdlatex"))
#+end_src
**** Xenops !
#+begin_src elisp :tangle "yes"
  (use-package xenops
  	:ensure (xenops :host github :repo "dandavison/xenops"))
#+end_src
**** Laas
#+begin_src elisp :tangle "yes"
  (use-package laas
  	:ensure (laas :host github repo: "tecosaur/LaTeX-auto-activating-snippets"))
#+end_src
**** amsreftex
#+begin_src elisp :tangle "yes"
  (use-package amsreftex
  	:ensure (amsreftex :host github :repo "franburstall/amsreftex"))
#+end_src
**** Magic-latex-buffer !
faces to customize.
#+begin_src elisp :tangle "yes"
  (use-package magic-latex-buffer
  	:ensure (magic-latex-buffer :host github :repo "zk-phi/magic-latex-buffer"))
#+end_src
**** Latex-preview-pane
#+begin_src elisp :tangle "yes"
  (use-package latex-preview-pane
   :ensure (latex-preview-pane :host github :repo "jsinglet/latex-preview-pane")
   :custom
   (pdf-latex-command "pdflatex") ;; default but specified in case I want to use luatex or xetex
   (preview-orientation 'right) ;; can be any of : above, left, below and right.
   (latex-preview-pane-use-frame nil) ;; default but specified in case I want to go for OneOnOneEmacs
   (latex-preview-pane-multifile-mode 'auctex))
#+end_src
**** Litex
#+begin_src elisp :tangle "yes"
  (use-package litex-mode
  	:ensure (litex-mode :host github :repo "Atreyagaurav/litex-mode"))
#+end_src
**** tex-item
#+begin_src elisp :tangle "yes"
  (use-package tex-item
  	:ensure (tex-item :host github :repo "ultronozm/tex-item.el"))
#+end_src
**** tex-parens !
#+begin_src elisp :tangle "yes"
  (use-package tex-parens
  	:ensure (tex-parens :host github :repo "ultronozm/tex-parens.el"))
#+end_src
**** latex-table-wizard !
need to custom faces
#+begin_src elisp :tangle "yes"
  (use-package latex-table-wizard
  	:ensure (latex-table-wizard :host github :repo "enricoflor/latex-table-wizard")
  	:custom
  	(latex-table-wizard-allow-detached-args t))
#+end_src
**** preview-latex
#+begin_src elisp :tangle "yes"
  (use-package px
  	:ensure (px :host github :repo "aaptel/preview-latex"))
#+end_src
**** Texlab (LSP) !
Needs Cargo, if outdated do : "rustup update"
#+begin_src shell :tangle "no"
  git clone https://github.com/latex-lsp/texlab.git ~/.cache/texlab # could be another dest but this is a practical one.
    cd ~/.cache/texlab
    cargo build --release # Remove the --release for a debug build.
  	# Add it to path by modifying .bashrc or .profile or smth,
  	#it'd look like : export PATH=$PATH:~/.cache/texlab/target/release
#+end_src
*** OCAML !
**** Opam
:PROPERTIES:
:EMACS: 24.1
:REQ_EXT: Opam
:REQ_INT: None
:OPT_EXT: Ocaml, Coq, Merlin
:OPT_INT: Merlin-mode, Tuareg-mode, Caml-mode, Coq-mode
:END:
Idea : Take ownership of the repo (it is orphaned), and make it a real opam repo instead of just a script for init ?
Would need to see the overlaps between say, this, and  [[Opam-Switch !]].
#+begin_src elisp :tangle "yes"
  (use-package opam
    :ensure (opam :host github :repo "emacsorphanage/opam")
    :hook ((coq-mode merlin-mode tuareg-mode caml-mode) . opam-init))
#+end_src
**** Opam-Switch
:PROPERTIES:
:EMACS: 25.1
:REQ_EXT: Opam
:REQ_INT: None
:OPT_EXT: Ocaml, Coq, Merlin
:OPT_INT: Tuareg, Merlin-mode, Coq-mode, Caml-mode
:END:
#+begin_src elisp :tangle "yes"
  (use-package opam-switch-mode
    :ensure (opam-switch-mode :host github :repo "ProofGeneral/opam-switch-mode")
    :hook ((coq-mode tuareg-mode merlin-mode  caml-mode) . opam-switch-mode))
#+end_src
**** Caml !
#+begin_src elisp :tangle "yes"
  ;; to configure
  (use-package caml
    :ensure (caml-mode :host github :repo "ocaml/caml-mode" :main "caml.el")
    :custom
    (caml-imenu-enable t)
    (caml-electric-indent t)
    (caml-electric-close-vector t))
#+end_src
**** Tuareg !
#+begin_src elisp :tangle "yes"
  (use-package tuareg
    :ensure (tuareg :host github :repo "ocaml/tuareg")
    :custom
    (tuareg-opam-insinuate t)
    (tuareg-electric-close-vector t)
    (tuareg-electric-indent t)
    (tuareg-indent-align-with-first-arg t)
    (tuareg-match-patterns-aligned t)
    (tuareg-mode-line-other-file t))
#+end_src
**** Merlin !
Requirement : ((emacs "25.1"))
(require 'cl-lib)
(require 'crm) ;; for completing-read-multiple
;; caml-types for highlighting
;; (https://github.com/ocaml/merlin/issues/331)
(require 'caml-types nil 'noerror)

#+begin_src elisp :tangle "yes"
  (use-package merlin
    :ensure (merlin :host github :repo "ocaml/merlin" :branch "main" :depth treeless
                    :files ("emacs/merlin.el" "emacs/merlin-imenu.el" "emacs/merlin-xref.el" "emacs/merlin-cap.el"))
    :hook ((tuareg-mode caml-mode) . merlin-mode)
    :custom
  	(merlin-report-errors-in-lighter t)
    (merlin-completion-with-doc t)
  	(merlin-favourite-caml-mode 'tuareg-mode)
  	(merlin-error-after-save '("ml" "mli" "mly")) ;; OXcaml, metaOcaml ?
  	(merlin-error-in-fringe t)
  	(merlin-error-on-single-line nil)
  	(merlin-locate-focus-new-window nil)
  	(merlin-type-after-locate t)
  	(merlin-construct-with-local-values t)
  	(merlin-default-flags '("-strict-sequence" "-strict-formats"))
  	(merlin-cache-lifespan 15))
#+end_src
**** Merlin-Eldoc !
Package-Requires: ((emacs "24.4") (merlin "3.0")) eldoc
internal packages : subr-x, cl-lib, newcomment
external : merlin (opam install merlin
#+begin_src elisp :tangle "yes"
  (use-package merlin-eldoc
    :ensure (:wait t)
  	:custom
  	(merlin-eldoc-delimiter " | ")
  	(merlin-eldoc-truncate-marker "(...)")
  	(merlin-eldoc-skip-on-merlin-error nil))
#+end_src
**** Dune !
#+begin_src elisp :tangle "yes"
  ;; gotta do the dune-watch
  (use-package dune
    :ensure (dune :host github :repo "ocaml/dune" :pin t ;; we pin because it has too much activity unrelated
                  :files ("editor-integration/emacs/dune.el" "editor-integration/emacs/dune-watch.el")))
#+end_src
**** Dune-format !
#+begin_src elisp :tangle "yes"
  ;; fully done, reformatter not configured manually tho
  (use-package dune-format
    :ensure (dune-format :host github :repo "purcell/emacs-dune-format")
    :hook (dune-mode . dune-format-on-save-mode))
#+end_src
**** Iedit !
  #+begin_src elisp :tangle "yes"
    (use-package iedit
      :ensure t)
#+end_src
**** Merlin-Iedit !
#+begin_src elisp :tangle "yes"
    (use-package merlin-iedit
      ;;:disabled
      :ensure t)
#+end_src
**** Ocamlformat !
#+begin_src elisp :tangle "yes"
    (use-package ocamlformat
      :ensure t
      :disabled
      :hook (before-save . ocamlformat-before-save)
      :custom (ocamlformat-enable 'enable-outside-detected-project))
#+end_src
**** Utop !
#+begin_src elisp :tangle "yes"
    (use-package utop
    :ensure (utop :host github :repo "ocaml-community/utop"))
#+end_src
**** Learn-ocaml !
#+begin_src elisp :tangle "no"
    (use-package learn-ocaml
    	:ensure (learn-ocaml :host github :repo "pfitaxel/learn-ocaml.el"))
#+end_src
(defface utop-prompt
  '((((background dark)) (:foreground "Cyan1"))
    (((background light)) (:foreground "blue")))
  "The face used to highlight the prompt.")

(defface utop-stdout
  nil
  "The face used to highlight messages coming from stdout.")

(defface utop-stderr
  nil
  "The face used to highlight messages coming from stderr.")

(defface utop-frozen
  '((t (:bold t)))
  "The face used to highlight text that has been sent to utop.")

(defface utop-error
  '((t (:foreground "#ff4040" :bold t :underline t)))
  "The face used to highlight errors in phrases.")
*** Coq !
**** Proof General !
TODO : CONFIGURE
#+begin_src elisp :tangle "yes"
  (use-package proof-general
  	:ensure (proof-general :host github :repo "ProofGeneral/PG"))
#+end_src
*** Lolcode
Contribute to it by letting users change the fonts ?
#+begin_src elisp :tangle "yes"
  (use-package lolcode-mode
    :ensure (lolcode-mode :host github :repo "bodil/lolcode-mode"))
#+end_src
*** Yaml !
**** Yaml-mode !
#+begin_src elisp :tangle "yes"
  (use-package yaml-mode
    :ensure (yaml-mode :host github :repo "yoshiki/yaml-mode")
  	:hook ((yaml-mode markdown-mode) . yafolding-mode)
    :init
    (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
    :custom
    (yaml-indent-offset 4))
#+end_src
**** Yaml-pro !
yaml mode is for legacy usage of yaml-pro, the ts mode is prefered.
#+begin_src elisp :tangle "yes"
  
  								
  (use-package yaml-pro
  	:ensure (yaml-pro :host github :repo "zkry/yaml-pro")
  	;:hook ((yaml-mode yaml-ts-mode) . yaml-pro-ts-mode)
  	:custom
  	(yaml-pro-indent (if (boundp 'yaml-indent-offset)  yaml-indent-offset 4))
  	(yaml-pro-max-parse-size 5000)
  	(yaml-pro-format-print-width 0)
  	(yaml-pro-format-features '(block-formatting
  															bm-fn-next-line
  															document-separator-own-line
  															indent
  															reduce-newlines))
  	(yaml-pro-ts-yank-subtrees t)
  	(yaml-pro-ts-path-element-separator ?â†’))

#+end_src
*** other handlers !
#+begin_src elisp :tangle "yes"
  (use-package format-sql
    :ensure t)
  
  (use-package json-reformat
    :ensure (json-reformat :host github :repo "gongo/json-reformat")
    :custom
    (json-reformat:indent-width 2)
    (json-reformat:pretty-string? t))

  (use-package call-graph
    :ensure t
    :custom
    (call-graph-path-to-global "/usr/local/bin/global")
    (call-graph-initial-max-depth 10)
    (call-graph-ignore-invalid-reference t)
    (call-graph-display-func-args t))
#+end_src
*** Java !
**** Gradle !
#+begin_src elisp :tangle "yes"
  (use-package gradle-mode
  	:ensure (gradle-mode :host github :repo "scubacabra/emacs-gradle-mode"))
#+end_src
**** JDTLS
How to install the java lsp , note you need a jdk about java 21 as of september 2025:
#+begin_src bash :tangle "no"
  export DEST= ...
  # {DEST} could be ~/.cache/ for example.
  export JAVA_HOME=...
  # jdk, not jre, for openjdk, this is usually /usr/lib/jvm/java-{VERSION}-openjdk-{architecture : arm64, amd64,...}
  # if maven (mvnw) complains about JAVA_HOME being poorly configured / missing, this is what to fix.
  git clone https://github.com/eclipse-jdtls/eclipse.jdt.ls.git $(DEST)
  cd $(DEST)
  ./mvnw clean verify -U -DskipTests=true
  echo "export PATH=$PATH:$(DEST)/eclipse.jdt.ls/org.eclipse.jdt.ls.product/target/repository/bin/" >> .bashrc
  #  you could also use, say, bash.profile, the important part is for it to be in your path.
  source .bashrc
  # Same comment as above. You could also just restart the shell.
#+end_src
*** Ebuilds !
#+begin_src elisp :tangle "yes"
  (use-package ebuild-mode
  	:ensure (ebuild-mode :repo "https://gitweb.gentoo.org/proj/ebuild-mode.git"))
#+end_src
** Org !
:PROPERTIES:
:EMACS: 0 (None specified ?)
:REQ_EXT: None
:REQ_INT: Org-mode
:OPT_EXT: None
:OPT_INT: None
:END:
*** toc-org
:PROPERTIES:
:EMACS: 0 (None spÃ©cified ?)
:REQ_EXT: None
:REQ_INT: Org-mode
:OPT_EXT: None
:OPT_INT: None
:END:
#+begin_src elisp :tangle "yes"
  (use-package toc-org
    :ensure (toc-org :host github :repo "snosov1/toc-org")
    :hook (((org-mode markdown-mode) . toc-org-mode)
  				 (toc-org-mode . (lambda () (toc-org-insert-toc))))
    :custom
    (toc-org-max-depth 100) ;; it'll never go that deep but at least it covers all use cases.
    (toc-org-hrefify-default "gh") ;; "gh" and "org" are the only options
    (toc-org-enable-links-opening t))
#+end_src
*** org-modern !
#+begin_src elisp :tangle "yes"
  (use-package org-modern
  	:ensure (org-modern :host github :repo "minad/org-modern")
  	:custom
  	(org-modern-progress 40))
#+end_src
*** org-popup-posframe !
:PROPERTIES:
:EMACS: 28.1
:REQ_EXT: None
:REQ_INT: ("postframe" "1.4.2"), Org-mode
:OPT_EXT: None
:OPT_INT: None
:END:
#+begin_src elisp :tangle "yes"
  (use-package org-popup-posframe
  	:ensure (org-popup-posframe :host github :repo "A7R7/org-popup-posframe"))
#+end_src
